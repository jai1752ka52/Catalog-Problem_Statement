#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Function to convert a string in a given base to a decimal integer
long long int base_to_decimal(char *value, int base) {
    long long int result = 0;
    int length = strlen(value);
    for (int i = 0; i < length; i++) {
        char digit = value[i];
        int num;
        if (digit >= '0' && digit <= '9') {
            num = digit - '0';
        } else if (digit >= 'A' && digit <= 'F') {
            num = digit - 'A' + 10;
        } else if (digit >= 'a' && digit <= 'f') {
            num = digit - 'a' + 10;
        } else {
            num = 0;
        }
        result = result * base + num;
    }
    return result;
}

// Function to implement Lagrange Interpolation
double lagrange_interpolation(int x[], long long int y[], int k) {
    double result = 0.0;

    for (int i = 0; i < k; i++) {
        double term = y[i];
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term = term * (0 - x[j]) / (x[i] - x[j]);
            }
        }
        result += term;
    }

    return result;
}

int main() {
    // Sample input data (can be replaced with actual JSON parsing)
    int n = 4;  // Number of roots provided
    int k = 3;  // Minimum number of points required to solve the polynomial

    // x and y values (after decoding y from different bases)
    int x[] = {1, 2, 3, 6};  // X values (keys)
    char *base_values[] = {"10", "2", "10", "4"};  // Base of Y values
    char *encoded_y[] = {"4", "111", "12", "213"};  // Encoded Y values

    long long int y[4];  // Decoded Y values in base 10

    // Decode Y values based on their base
    for (int i = 0; i < n; i++) {
        int base = atoi(base_values[i]);
        y[i] = base_to_decimal(encoded_y[i], base);
        printf("Decoded y[%d] = %lld\n", i, y[i]);
    }

    // Calculate the constant term 'c' using Lagrange interpolation
    double c = lagrange_interpolation(x, y, k);
    printf("The constant term (secret) is: %.0f\n", c);

    return 0;
}
